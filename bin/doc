#!/usr/bin/env python3

"""
What's up, doc.. ker-compose?

Usage:
    doc [--env ENV] ARGS...

Environment Variables:
    DOC_ENV: Environment to use (same as --env flag)

"""

from functools import partial
import argparse

import subprocess
import sys
import os
import signal
import shutil

from collections.abc import Callable, Sequence

try:
    from colored import stylize, fg  # type: ignore
except ImportError:
    # pylint: disable=unused-argument
    def stylize(line: str, *args) -> str:
        """Returns a line unchanged."""
        return line

    # pylint: disable=unused-argument, invalid-name
    def fg(*args):
        """Do nothing."""


def docker_command() -> list[str]:
    """Find the docker-compose command."""

    if shutil.which("docker-compose"):
        return ["docker-compose"]

    if shutil.which("docker"):
        return ["docker", "compose"]

    raise RuntimeError("No docker-compose command found in PATH")


def sail_args(more_args: list[str]) -> list[str]:
    """Construct call arguments for Laravel Sail command."""

    return [
        "./vendor/bin/sail",
    ] + more_args


def docker_with_path_args(path: str, more_args: list[str]) -> list[str]:
    """
    Construct call arguments for docker-compose command,
    explicitly providing which docker-compose.yml to use.
    """

    return docker_command() + ["-f", path] + more_args


def docker_with_env_args(env: str, more_args: list[str]) -> list[str]:
    """
    Construct call arguments for docker-compose command,
    using environment-specific docker-compose-{env}.yml file.
    """

    path = f"docker-compose-{env}.yml"
    return docker_command() + ["-f", path] + more_args


def docker_without_path_args(more_args: list[str]) -> list[str]:
    """Construct call arguments for docker-compose command."""

    return docker_command() + more_args


def print_and_run(args: Sequence[str]) -> int:
    """Print a command to be run and run it."""

    print(stylize(" ".join(args), fg("light_green")))

    return subprocess.call(args)


# pylint: disable=unused-argument, missing-function-docstring
def handler(signum, frame):
    pass


signal.signal(signal.SIGINT, handler)


def bind(arg, *funcs: Callable) -> tuple[Callable]:
    """Bind multiple functions to the same argument."""

    return tuple(partial(f, arg) for f in funcs)


def get_to_check(env: str = None) -> tuple:
    """Build the to_check tuple, optionally prioritizing environment-specific files."""
    checks = []
    
    # If env is specified, check for environment-specific file first
    if env:
        env_file = f"docker-compose-{env}.yml"
        checks.append(bind(env_file, os.path.exists, docker_with_path_args))
    
    # Add all other checks
    checks.extend([
        bind("vendor/bin/sail", os.path.exists) + (sail_args,),
        bind("docker-compose.yml", os.path.exists) + (docker_without_path_args,),
        bind("docker/development/compose.yml", os.path.exists, docker_with_path_args),
        bind(
            "docker/development/docker-compose.yml", os.path.exists, docker_with_path_args
        ),
        bind("docker/local/docker-compose.yml", os.path.exists, docker_with_path_args),
    ])
    
    return tuple(checks)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="What's up, doc.. ker-compose?")
    parser.add_argument("--env", help="Environment to use (looks for docker-compose-{env}.yml)")
    parser.add_argument("args", nargs="*", help="Arguments to pass to docker-compose")
    
    parsed_args = parser.parse_args()
    
    # Use --env flag if provided, otherwise check DOC_ENV environment variable
    env = parsed_args.env or os.environ.get("DOC_ENV")
    
    to_check = get_to_check(env)
    
    for test, func in to_check:
        if not test():
            continue

        sys.exit(print_and_run(func(parsed_args.args)))
