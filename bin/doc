#!/usr/bin/env python3

"""
What's up, doc.. ker-compose?

Usage:
    doc ARGS...

"""

from functools import partial

import subprocess
import sys
import os
import signal

from typing import Callable, Tuple, Sequence

try:
    from colored import stylize, fg  # type: ignore
except ImportError:
    # pylint: disable=unused-argument
    def stylize(line: str, *args) -> str:
        """Returns a line unchanged."""
        return line

    # pylint: disable=unused-argument, invalid-name
    def fg(*args):
        """Do nothing."""


def sail_args() -> list[str]:
    """Construct call arguments for Laravel Sail command."""

    return [
        "./vendor/bin/sail",
    ] + sys.argv[1:]


def docker_with_path_args(path: str) -> list[str]:
    """
    Construct call arguments for docker-compose command,
    explicitly providing which docker-compose.yml to use.
    """

    return ["docker-compose", "-f", path] + sys.argv[1:]


def docker_without_path_args() -> list[str]:
    """Construct call arguments for docker-compose command."""

    return [
        "docker-compose",
    ] + sys.argv[1:]


def print_and_run(args: Sequence[str]) -> int:
    """Print a command to be run and run it."""

    print(stylize(" ".join(args), fg("light_green")))

    return subprocess.call(args)


# pylint: disable=unused-argument, missing-function-docstring
def handler(signum, frame):
    pass


signal.signal(signal.SIGINT, handler)


def bind(arg, *funcs: Callable) -> Tuple[Callable, ...]:
    """Bind multiple functions to the same argument."""

    return tuple(partial(f, arg) for f in funcs)


to_check = (
    bind("vendor/bin/sail", os.path.exists) + (sail_args,),
    bind("docker-compose.yml", os.path.exists) + (docker_without_path_args,),
    bind(
        "docker/development/docker-compose.yml", os.path.exists, docker_with_path_args
    ),
)

if __name__ == "__main__":
    for test, func in to_check:
        if not test():
            continue

        sys.exit(print_and_run(func()))
